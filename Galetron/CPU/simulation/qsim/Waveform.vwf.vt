// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/04/2017 11:28:55"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          CPU
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module CPU_vlg_vec_tst();
// constants                                           
// general purpose registers
reg machineClock;
reg [17:0] switches;
reg UserClock;
// wires                                               
wire [6:0] billions;
wire [6:0] gazillions;
wire [31:0] hd_output;
wire [6:0] hundreds;
wire inLED;
wire [31:0] instruction;
wire [9:0] lmoutput;
wire [6:0] millions;
wire negLED;
wire [22:0] offLEDS;
wire [6:0] ones;
wire outLED;
wire [6:0] tens;
wire [6:0] thousands;
wire [6:0] trillions;

// assign statements (if any)                          
CPU i1 (
// port map - connection between master ports and signals/registers   
	.billions(billions),
	.gazillions(gazillions),
	.hd_output(hd_output),
	.hundreds(hundreds),
	.inLED(inLED),
	.instruction(instruction),
	.lmoutput(lmoutput),
	.machineClock(machineClock),
	.millions(millions),
	.negLED(negLED),
	.offLEDS(offLEDS),
	.ones(ones),
	.outLED(outLED),
	.switches(switches),
	.tens(tens),
	.thousands(thousands),
	.trillions(trillions),
	.UserClock(UserClock)
);
initial 
begin 
#1000000 $finish;
end 

// machineClock
always
begin
	machineClock = 1'b0;
	machineClock = #10000 1'b1;
	#10000;
end 

// UserClock
initial
begin
	UserClock = 1'b0;
	UserClock = #352500 1'b1;
	# 22500;
	repeat(12)
	begin
		UserClock = 1'b0;
		UserClock = #22500 1'b1;
		# 22500;
	end
	UserClock = 1'b0;
	UserClock = #22500 1'b1;
	UserClock = #2500 1'b0;
end 
// switches[ 17 ]
initial
begin
	switches[17] = 1'b0;
end 
// switches[ 16 ]
initial
begin
	switches[16] = 1'b0;
end 
// switches[ 15 ]
initial
begin
	switches[15] = 1'b0;
end 
// switches[ 14 ]
initial
begin
	switches[14] = 1'b0;
end 
// switches[ 13 ]
initial
begin
	switches[13] = 1'b0;
end 
// switches[ 12 ]
initial
begin
	switches[12] = 1'b0;
end 
// switches[ 11 ]
initial
begin
	switches[11] = 1'b0;
end 
// switches[ 10 ]
initial
begin
	switches[10] = 1'b0;
end 
// switches[ 9 ]
initial
begin
	switches[9] = 1'b0;
end 
// switches[ 8 ]
initial
begin
	switches[8] = 1'b0;
end 
// switches[ 7 ]
initial
begin
	switches[7] = 1'b0;
end 
// switches[ 6 ]
initial
begin
	switches[6] = 1'b0;
end 
// switches[ 5 ]
initial
begin
	switches[5] = 1'b0;
end 
// switches[ 4 ]
initial
begin
	switches[4] = 1'b0;
end 
// switches[ 3 ]
initial
begin
	switches[3] = 1'b0;
end 
// switches[ 2 ]
initial
begin
	switches[2] = 1'b0;
end 
// switches[ 1 ]
initial
begin
	switches[1] = 1'b0;
end 
// switches[ 0 ]
initial
begin
	switches[0] = 1'b0;
end 
endmodule

