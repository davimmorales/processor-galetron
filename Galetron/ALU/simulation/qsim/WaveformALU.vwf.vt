// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/13/2016 14:46:25"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    ALU
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ALU_vlg_sample_tst(
	aluControl,
	dataA,
	dataB,
	shamt,
	sampler_tx
);
input [3:0] aluControl;
input [31:0] dataA;
input [31:0] dataB;
input [4:0] shamt;
output sampler_tx;

reg sample;
time current_time;
always @(aluControl or dataA or dataB or shamt)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module ALU_vlg_check_tst (
	aluOut,
	negative,
	zero,
	sampler_rx
);
input [31:0] aluOut;
input  negative;
input  zero;
input sampler_rx;

reg [31:0] aluOut_expected;
reg  negative_expected;
reg  zero_expected;

reg [31:0] aluOut_prev;
reg  negative_prev;
reg  zero_prev;

reg [31:0] aluOut_expected_prev;
reg  negative_expected_prev;
reg  zero_expected_prev;

reg [31:0] last_aluOut_exp;
reg  last_negative_exp;
reg  last_zero_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	aluOut_prev = aluOut;
	negative_prev = negative;
	zero_prev = zero;
end

// update expected /o prevs

always @(trigger)
begin
	aluOut_expected_prev = aluOut_expected;
	negative_expected_prev = negative_expected;
	zero_expected_prev = zero_expected;
end


// expected aluOut[ 31 ]
initial
begin
	aluOut_expected[31] = 1'bX;
end 
// expected aluOut[ 30 ]
initial
begin
	aluOut_expected[30] = 1'bX;
end 
// expected aluOut[ 29 ]
initial
begin
	aluOut_expected[29] = 1'bX;
end 
// expected aluOut[ 28 ]
initial
begin
	aluOut_expected[28] = 1'bX;
end 
// expected aluOut[ 27 ]
initial
begin
	aluOut_expected[27] = 1'bX;
end 
// expected aluOut[ 26 ]
initial
begin
	aluOut_expected[26] = 1'bX;
end 
// expected aluOut[ 25 ]
initial
begin
	aluOut_expected[25] = 1'bX;
end 
// expected aluOut[ 24 ]
initial
begin
	aluOut_expected[24] = 1'bX;
end 
// expected aluOut[ 23 ]
initial
begin
	aluOut_expected[23] = 1'bX;
end 
// expected aluOut[ 22 ]
initial
begin
	aluOut_expected[22] = 1'bX;
end 
// expected aluOut[ 21 ]
initial
begin
	aluOut_expected[21] = 1'bX;
end 
// expected aluOut[ 20 ]
initial
begin
	aluOut_expected[20] = 1'bX;
end 
// expected aluOut[ 19 ]
initial
begin
	aluOut_expected[19] = 1'bX;
end 
// expected aluOut[ 18 ]
initial
begin
	aluOut_expected[18] = 1'bX;
end 
// expected aluOut[ 17 ]
initial
begin
	aluOut_expected[17] = 1'bX;
end 
// expected aluOut[ 16 ]
initial
begin
	aluOut_expected[16] = 1'bX;
end 
// expected aluOut[ 15 ]
initial
begin
	aluOut_expected[15] = 1'bX;
end 
// expected aluOut[ 14 ]
initial
begin
	aluOut_expected[14] = 1'bX;
end 
// expected aluOut[ 13 ]
initial
begin
	aluOut_expected[13] = 1'bX;
end 
// expected aluOut[ 12 ]
initial
begin
	aluOut_expected[12] = 1'bX;
end 
// expected aluOut[ 11 ]
initial
begin
	aluOut_expected[11] = 1'bX;
end 
// expected aluOut[ 10 ]
initial
begin
	aluOut_expected[10] = 1'bX;
end 
// expected aluOut[ 9 ]
initial
begin
	aluOut_expected[9] = 1'bX;
end 
// expected aluOut[ 8 ]
initial
begin
	aluOut_expected[8] = 1'bX;
end 
// expected aluOut[ 7 ]
initial
begin
	aluOut_expected[7] = 1'bX;
end 
// expected aluOut[ 6 ]
initial
begin
	aluOut_expected[6] = 1'bX;
end 
// expected aluOut[ 5 ]
initial
begin
	aluOut_expected[5] = 1'bX;
end 
// expected aluOut[ 4 ]
initial
begin
	aluOut_expected[4] = 1'bX;
end 
// expected aluOut[ 3 ]
initial
begin
	aluOut_expected[3] = 1'bX;
end 
// expected aluOut[ 2 ]
initial
begin
	aluOut_expected[2] = 1'bX;
end 
// expected aluOut[ 1 ]
initial
begin
	aluOut_expected[1] = 1'bX;
end 
// expected aluOut[ 0 ]
initial
begin
	aluOut_expected[0] = 1'bX;
end 

// expected negative
initial
begin
	negative_expected = 1'bX;
end 

// expected zero
initial
begin
	zero_expected = 1'bX;
end 
// generate trigger
always @(aluOut_expected or aluOut or negative_expected or negative or zero_expected or zero)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected aluOut = %b | expected negative = %b | expected zero = %b | ",aluOut_expected_prev,negative_expected_prev,zero_expected_prev);
	$display("| real aluOut = %b | real negative = %b | real zero = %b | ",aluOut_prev,negative_prev,zero_prev);
`endif
	if (
		( aluOut_expected_prev[0] !== 1'bx ) && ( aluOut_prev[0] !== aluOut_expected_prev[0] )
		&& ((aluOut_expected_prev[0] !== last_aluOut_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluOut[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluOut_expected_prev);
		$display ("     Real value = %b", aluOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluOut_exp[0] = aluOut_expected_prev[0];
	end
	if (
		( aluOut_expected_prev[1] !== 1'bx ) && ( aluOut_prev[1] !== aluOut_expected_prev[1] )
		&& ((aluOut_expected_prev[1] !== last_aluOut_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluOut[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluOut_expected_prev);
		$display ("     Real value = %b", aluOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluOut_exp[1] = aluOut_expected_prev[1];
	end
	if (
		( aluOut_expected_prev[2] !== 1'bx ) && ( aluOut_prev[2] !== aluOut_expected_prev[2] )
		&& ((aluOut_expected_prev[2] !== last_aluOut_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluOut[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluOut_expected_prev);
		$display ("     Real value = %b", aluOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluOut_exp[2] = aluOut_expected_prev[2];
	end
	if (
		( aluOut_expected_prev[3] !== 1'bx ) && ( aluOut_prev[3] !== aluOut_expected_prev[3] )
		&& ((aluOut_expected_prev[3] !== last_aluOut_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluOut[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluOut_expected_prev);
		$display ("     Real value = %b", aluOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluOut_exp[3] = aluOut_expected_prev[3];
	end
	if (
		( aluOut_expected_prev[4] !== 1'bx ) && ( aluOut_prev[4] !== aluOut_expected_prev[4] )
		&& ((aluOut_expected_prev[4] !== last_aluOut_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluOut[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluOut_expected_prev);
		$display ("     Real value = %b", aluOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluOut_exp[4] = aluOut_expected_prev[4];
	end
	if (
		( aluOut_expected_prev[5] !== 1'bx ) && ( aluOut_prev[5] !== aluOut_expected_prev[5] )
		&& ((aluOut_expected_prev[5] !== last_aluOut_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluOut[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluOut_expected_prev);
		$display ("     Real value = %b", aluOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluOut_exp[5] = aluOut_expected_prev[5];
	end
	if (
		( aluOut_expected_prev[6] !== 1'bx ) && ( aluOut_prev[6] !== aluOut_expected_prev[6] )
		&& ((aluOut_expected_prev[6] !== last_aluOut_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluOut[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluOut_expected_prev);
		$display ("     Real value = %b", aluOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluOut_exp[6] = aluOut_expected_prev[6];
	end
	if (
		( aluOut_expected_prev[7] !== 1'bx ) && ( aluOut_prev[7] !== aluOut_expected_prev[7] )
		&& ((aluOut_expected_prev[7] !== last_aluOut_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluOut[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluOut_expected_prev);
		$display ("     Real value = %b", aluOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluOut_exp[7] = aluOut_expected_prev[7];
	end
	if (
		( aluOut_expected_prev[8] !== 1'bx ) && ( aluOut_prev[8] !== aluOut_expected_prev[8] )
		&& ((aluOut_expected_prev[8] !== last_aluOut_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluOut[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluOut_expected_prev);
		$display ("     Real value = %b", aluOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluOut_exp[8] = aluOut_expected_prev[8];
	end
	if (
		( aluOut_expected_prev[9] !== 1'bx ) && ( aluOut_prev[9] !== aluOut_expected_prev[9] )
		&& ((aluOut_expected_prev[9] !== last_aluOut_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluOut[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluOut_expected_prev);
		$display ("     Real value = %b", aluOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluOut_exp[9] = aluOut_expected_prev[9];
	end
	if (
		( aluOut_expected_prev[10] !== 1'bx ) && ( aluOut_prev[10] !== aluOut_expected_prev[10] )
		&& ((aluOut_expected_prev[10] !== last_aluOut_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluOut[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluOut_expected_prev);
		$display ("     Real value = %b", aluOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluOut_exp[10] = aluOut_expected_prev[10];
	end
	if (
		( aluOut_expected_prev[11] !== 1'bx ) && ( aluOut_prev[11] !== aluOut_expected_prev[11] )
		&& ((aluOut_expected_prev[11] !== last_aluOut_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluOut[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluOut_expected_prev);
		$display ("     Real value = %b", aluOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluOut_exp[11] = aluOut_expected_prev[11];
	end
	if (
		( aluOut_expected_prev[12] !== 1'bx ) && ( aluOut_prev[12] !== aluOut_expected_prev[12] )
		&& ((aluOut_expected_prev[12] !== last_aluOut_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluOut[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluOut_expected_prev);
		$display ("     Real value = %b", aluOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluOut_exp[12] = aluOut_expected_prev[12];
	end
	if (
		( aluOut_expected_prev[13] !== 1'bx ) && ( aluOut_prev[13] !== aluOut_expected_prev[13] )
		&& ((aluOut_expected_prev[13] !== last_aluOut_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluOut[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluOut_expected_prev);
		$display ("     Real value = %b", aluOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluOut_exp[13] = aluOut_expected_prev[13];
	end
	if (
		( aluOut_expected_prev[14] !== 1'bx ) && ( aluOut_prev[14] !== aluOut_expected_prev[14] )
		&& ((aluOut_expected_prev[14] !== last_aluOut_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluOut[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluOut_expected_prev);
		$display ("     Real value = %b", aluOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluOut_exp[14] = aluOut_expected_prev[14];
	end
	if (
		( aluOut_expected_prev[15] !== 1'bx ) && ( aluOut_prev[15] !== aluOut_expected_prev[15] )
		&& ((aluOut_expected_prev[15] !== last_aluOut_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluOut[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluOut_expected_prev);
		$display ("     Real value = %b", aluOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluOut_exp[15] = aluOut_expected_prev[15];
	end
	if (
		( aluOut_expected_prev[16] !== 1'bx ) && ( aluOut_prev[16] !== aluOut_expected_prev[16] )
		&& ((aluOut_expected_prev[16] !== last_aluOut_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluOut[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluOut_expected_prev);
		$display ("     Real value = %b", aluOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluOut_exp[16] = aluOut_expected_prev[16];
	end
	if (
		( aluOut_expected_prev[17] !== 1'bx ) && ( aluOut_prev[17] !== aluOut_expected_prev[17] )
		&& ((aluOut_expected_prev[17] !== last_aluOut_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluOut[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluOut_expected_prev);
		$display ("     Real value = %b", aluOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluOut_exp[17] = aluOut_expected_prev[17];
	end
	if (
		( aluOut_expected_prev[18] !== 1'bx ) && ( aluOut_prev[18] !== aluOut_expected_prev[18] )
		&& ((aluOut_expected_prev[18] !== last_aluOut_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluOut[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluOut_expected_prev);
		$display ("     Real value = %b", aluOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluOut_exp[18] = aluOut_expected_prev[18];
	end
	if (
		( aluOut_expected_prev[19] !== 1'bx ) && ( aluOut_prev[19] !== aluOut_expected_prev[19] )
		&& ((aluOut_expected_prev[19] !== last_aluOut_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluOut[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluOut_expected_prev);
		$display ("     Real value = %b", aluOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluOut_exp[19] = aluOut_expected_prev[19];
	end
	if (
		( aluOut_expected_prev[20] !== 1'bx ) && ( aluOut_prev[20] !== aluOut_expected_prev[20] )
		&& ((aluOut_expected_prev[20] !== last_aluOut_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluOut[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluOut_expected_prev);
		$display ("     Real value = %b", aluOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluOut_exp[20] = aluOut_expected_prev[20];
	end
	if (
		( aluOut_expected_prev[21] !== 1'bx ) && ( aluOut_prev[21] !== aluOut_expected_prev[21] )
		&& ((aluOut_expected_prev[21] !== last_aluOut_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluOut[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluOut_expected_prev);
		$display ("     Real value = %b", aluOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluOut_exp[21] = aluOut_expected_prev[21];
	end
	if (
		( aluOut_expected_prev[22] !== 1'bx ) && ( aluOut_prev[22] !== aluOut_expected_prev[22] )
		&& ((aluOut_expected_prev[22] !== last_aluOut_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluOut[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluOut_expected_prev);
		$display ("     Real value = %b", aluOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluOut_exp[22] = aluOut_expected_prev[22];
	end
	if (
		( aluOut_expected_prev[23] !== 1'bx ) && ( aluOut_prev[23] !== aluOut_expected_prev[23] )
		&& ((aluOut_expected_prev[23] !== last_aluOut_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluOut[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluOut_expected_prev);
		$display ("     Real value = %b", aluOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluOut_exp[23] = aluOut_expected_prev[23];
	end
	if (
		( aluOut_expected_prev[24] !== 1'bx ) && ( aluOut_prev[24] !== aluOut_expected_prev[24] )
		&& ((aluOut_expected_prev[24] !== last_aluOut_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluOut[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluOut_expected_prev);
		$display ("     Real value = %b", aluOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluOut_exp[24] = aluOut_expected_prev[24];
	end
	if (
		( aluOut_expected_prev[25] !== 1'bx ) && ( aluOut_prev[25] !== aluOut_expected_prev[25] )
		&& ((aluOut_expected_prev[25] !== last_aluOut_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluOut[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluOut_expected_prev);
		$display ("     Real value = %b", aluOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluOut_exp[25] = aluOut_expected_prev[25];
	end
	if (
		( aluOut_expected_prev[26] !== 1'bx ) && ( aluOut_prev[26] !== aluOut_expected_prev[26] )
		&& ((aluOut_expected_prev[26] !== last_aluOut_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluOut[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluOut_expected_prev);
		$display ("     Real value = %b", aluOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluOut_exp[26] = aluOut_expected_prev[26];
	end
	if (
		( aluOut_expected_prev[27] !== 1'bx ) && ( aluOut_prev[27] !== aluOut_expected_prev[27] )
		&& ((aluOut_expected_prev[27] !== last_aluOut_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluOut[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluOut_expected_prev);
		$display ("     Real value = %b", aluOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluOut_exp[27] = aluOut_expected_prev[27];
	end
	if (
		( aluOut_expected_prev[28] !== 1'bx ) && ( aluOut_prev[28] !== aluOut_expected_prev[28] )
		&& ((aluOut_expected_prev[28] !== last_aluOut_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluOut[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluOut_expected_prev);
		$display ("     Real value = %b", aluOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluOut_exp[28] = aluOut_expected_prev[28];
	end
	if (
		( aluOut_expected_prev[29] !== 1'bx ) && ( aluOut_prev[29] !== aluOut_expected_prev[29] )
		&& ((aluOut_expected_prev[29] !== last_aluOut_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluOut[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluOut_expected_prev);
		$display ("     Real value = %b", aluOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluOut_exp[29] = aluOut_expected_prev[29];
	end
	if (
		( aluOut_expected_prev[30] !== 1'bx ) && ( aluOut_prev[30] !== aluOut_expected_prev[30] )
		&& ((aluOut_expected_prev[30] !== last_aluOut_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluOut[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluOut_expected_prev);
		$display ("     Real value = %b", aluOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluOut_exp[30] = aluOut_expected_prev[30];
	end
	if (
		( aluOut_expected_prev[31] !== 1'bx ) && ( aluOut_prev[31] !== aluOut_expected_prev[31] )
		&& ((aluOut_expected_prev[31] !== last_aluOut_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port aluOut[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", aluOut_expected_prev);
		$display ("     Real value = %b", aluOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_aluOut_exp[31] = aluOut_expected_prev[31];
	end
	if (
		( negative_expected_prev !== 1'bx ) && ( negative_prev !== negative_expected_prev )
		&& ((negative_expected_prev !== last_negative_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port negative :: @time = %t",  $realtime);
		$display ("     Expected value = %b", negative_expected_prev);
		$display ("     Real value = %b", negative_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_negative_exp = negative_expected_prev;
	end
	if (
		( zero_expected_prev !== 1'bx ) && ( zero_prev !== zero_expected_prev )
		&& ((zero_expected_prev !== last_zero_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port zero :: @time = %t",  $realtime);
		$display ("     Expected value = %b", zero_expected_prev);
		$display ("     Real value = %b", zero_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_zero_exp = zero_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module ALU_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] aluControl;
reg [31:0] dataA;
reg [31:0] dataB;
reg [4:0] shamt;
// wires                                               
wire [31:0] aluOut;
wire negative;
wire zero;

wire sampler;                             

// assign statements (if any)                          
ALU i1 (
// port map - connection between master ports and signals/registers   
	.aluControl(aluControl),
	.aluOut(aluOut),
	.dataA(dataA),
	.dataB(dataB),
	.negative(negative),
	.shamt(shamt),
	.zero(zero)
);
// aluControl[ 3 ]
initial
begin
	aluControl[3] = 1'b1;
end 
// aluControl[ 2 ]
initial
begin
	aluControl[2] = 1'b1;
end 
// aluControl[ 1 ]
initial
begin
	aluControl[1] = 1'b1;
end 
// aluControl[ 0 ]
initial
begin
	aluControl[0] = 1'b0;
end 
// dataA[ 31 ]
initial
begin
	dataA[31] = 1'b0;
end 
// dataA[ 30 ]
initial
begin
	dataA[30] = 1'b0;
end 
// dataA[ 29 ]
initial
begin
	dataA[29] = 1'b0;
end 
// dataA[ 28 ]
initial
begin
	dataA[28] = 1'b0;
end 
// dataA[ 27 ]
initial
begin
	dataA[27] = 1'b0;
end 
// dataA[ 26 ]
initial
begin
	dataA[26] = 1'b0;
end 
// dataA[ 25 ]
initial
begin
	dataA[25] = 1'b0;
end 
// dataA[ 24 ]
initial
begin
	dataA[24] = 1'b0;
end 
// dataA[ 23 ]
initial
begin
	dataA[23] = 1'b0;
end 
// dataA[ 22 ]
initial
begin
	dataA[22] = 1'b0;
end 
// dataA[ 21 ]
initial
begin
	dataA[21] = 1'b0;
end 
// dataA[ 20 ]
initial
begin
	dataA[20] = 1'b0;
end 
// dataA[ 19 ]
initial
begin
	dataA[19] = 1'b0;
end 
// dataA[ 18 ]
initial
begin
	dataA[18] = 1'b0;
end 
// dataA[ 17 ]
initial
begin
	dataA[17] = 1'b0;
end 
// dataA[ 16 ]
initial
begin
	dataA[16] = 1'b0;
end 
// dataA[ 15 ]
initial
begin
	dataA[15] = 1'b0;
end 
// dataA[ 14 ]
initial
begin
	dataA[14] = 1'b0;
end 
// dataA[ 13 ]
initial
begin
	dataA[13] = 1'b0;
end 
// dataA[ 12 ]
initial
begin
	dataA[12] = 1'b0;
end 
// dataA[ 11 ]
initial
begin
	dataA[11] = 1'b0;
end 
// dataA[ 10 ]
initial
begin
	dataA[10] = 1'b0;
end 
// dataA[ 9 ]
initial
begin
	dataA[9] = 1'b0;
end 
// dataA[ 8 ]
initial
begin
	dataA[8] = 1'b0;
end 
// dataA[ 7 ]
initial
begin
	dataA[7] = 1'b0;
end 
// dataA[ 6 ]
initial
begin
	dataA[6] = 1'b0;
end 
// dataA[ 5 ]
initial
begin
	dataA[5] = 1'b0;
end 
// dataA[ 4 ]
initial
begin
	dataA[4] = 1'b0;
end 
// dataA[ 3 ]
initial
begin
	dataA[3] = 1'b1;
end 
// dataA[ 2 ]
initial
begin
	dataA[2] = 1'b1;
end 
// dataA[ 1 ]
initial
begin
	dataA[1] = 1'b0;
end 
// dataA[ 0 ]
initial
begin
	dataA[0] = 1'b0;
end 
// dataB[ 31 ]
initial
begin
	dataB[31] = 1'b0;
end 
// dataB[ 30 ]
initial
begin
	dataB[30] = 1'b0;
end 
// dataB[ 29 ]
initial
begin
	dataB[29] = 1'b0;
end 
// dataB[ 28 ]
initial
begin
	dataB[28] = 1'b0;
end 
// dataB[ 27 ]
initial
begin
	dataB[27] = 1'b0;
end 
// dataB[ 26 ]
initial
begin
	dataB[26] = 1'b0;
end 
// dataB[ 25 ]
initial
begin
	dataB[25] = 1'b0;
end 
// dataB[ 24 ]
initial
begin
	dataB[24] = 1'b0;
end 
// dataB[ 23 ]
initial
begin
	dataB[23] = 1'b0;
end 
// dataB[ 22 ]
initial
begin
	dataB[22] = 1'b0;
end 
// dataB[ 21 ]
initial
begin
	dataB[21] = 1'b0;
end 
// dataB[ 20 ]
initial
begin
	dataB[20] = 1'b0;
end 
// dataB[ 19 ]
initial
begin
	dataB[19] = 1'b0;
end 
// dataB[ 18 ]
initial
begin
	dataB[18] = 1'b0;
end 
// dataB[ 17 ]
initial
begin
	dataB[17] = 1'b0;
end 
// dataB[ 16 ]
initial
begin
	dataB[16] = 1'b0;
end 
// dataB[ 15 ]
initial
begin
	dataB[15] = 1'b0;
end 
// dataB[ 14 ]
initial
begin
	dataB[14] = 1'b0;
end 
// dataB[ 13 ]
initial
begin
	dataB[13] = 1'b0;
end 
// dataB[ 12 ]
initial
begin
	dataB[12] = 1'b0;
end 
// dataB[ 11 ]
initial
begin
	dataB[11] = 1'b0;
end 
// dataB[ 10 ]
initial
begin
	dataB[10] = 1'b0;
end 
// dataB[ 9 ]
initial
begin
	dataB[9] = 1'b0;
end 
// dataB[ 8 ]
initial
begin
	dataB[8] = 1'b0;
end 
// dataB[ 7 ]
initial
begin
	dataB[7] = 1'b0;
end 
// dataB[ 6 ]
initial
begin
	dataB[6] = 1'b0;
end 
// dataB[ 5 ]
initial
begin
	dataB[5] = 1'b0;
end 
// dataB[ 4 ]
initial
begin
	dataB[4] = 1'b0;
end 
// dataB[ 3 ]
initial
begin
	dataB[3] = 1'b0;
end 
// dataB[ 2 ]
initial
begin
	dataB[2] = 1'b1;
end 
// dataB[ 1 ]
initial
begin
	dataB[1] = 1'b1;
end 
// dataB[ 0 ]
initial
begin
	dataB[0] = 1'b1;
end 
// shamt[ 4 ]
initial
begin
	shamt[4] = 1'b0;
end 
// shamt[ 3 ]
initial
begin
	shamt[3] = 1'b0;
end 
// shamt[ 2 ]
initial
begin
	shamt[2] = 1'b0;
end 
// shamt[ 1 ]
initial
begin
	shamt[1] = 1'b0;
end 
// shamt[ 0 ]
initial
begin
	shamt[0] = 1'b0;
end 

ALU_vlg_sample_tst tb_sample (
	.aluControl(aluControl),
	.dataA(dataA),
	.dataB(dataB),
	.shamt(shamt),
	.sampler_tx(sampler)
);

ALU_vlg_check_tst tb_out(
	.aluOut(aluOut),
	.negative(negative),
	.zero(zero),
	.sampler_rx(sampler)
);
endmodule

