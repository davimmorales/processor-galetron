// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/22/2016 13:13:56"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          dataRAM
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module dataRAM_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [10:0] address;
reg clock;
reg [31:0] data;
reg writeEnable;
// wires                                               
wire [31:0] dataRAMOutput;

// assign statements (if any)                          
dataRAM i1 (
// port map - connection between master ports and signals/registers   
	.address(address),
	.clock(clock),
	.data(data),
	.dataRAMOutput(dataRAMOutput),
	.writeEnable(writeEnable)
);
initial 
begin 
#1000000 $finish;
end 
// address[ 10 ]
initial
begin
	address[10] = 1'b0;
end 
// address[ 9 ]
initial
begin
	address[9] = 1'b0;
end 
// address[ 8 ]
initial
begin
	address[8] = 1'b0;
end 
// address[ 7 ]
initial
begin
	address[7] = 1'b0;
end 
// address[ 6 ]
initial
begin
	address[6] = 1'b0;
end 
// address[ 5 ]
initial
begin
	address[5] = 1'b0;
end 
// address[ 4 ]
initial
begin
	address[4] = 1'b1;
end 
// address[ 3 ]
initial
begin
	address[3] = 1'b1;
end 
// address[ 2 ]
initial
begin
	address[2] = 1'b1;
end 
// address[ 1 ]
initial
begin
	address[1] = 1'b1;
end 
// address[ 0 ]
initial
begin
	address[0] = 1'b1;
end 
// data[ 31 ]
initial
begin
	data[31] = 1'b0;
end 
// data[ 30 ]
initial
begin
	data[30] = 1'b0;
end 
// data[ 29 ]
initial
begin
	data[29] = 1'b0;
end 
// data[ 28 ]
initial
begin
	data[28] = 1'b0;
end 
// data[ 27 ]
initial
begin
	data[27] = 1'b0;
end 
// data[ 26 ]
initial
begin
	data[26] = 1'b0;
end 
// data[ 25 ]
initial
begin
	data[25] = 1'b0;
end 
// data[ 24 ]
initial
begin
	data[24] = 1'b0;
end 
// data[ 23 ]
initial
begin
	data[23] = 1'b0;
end 
// data[ 22 ]
initial
begin
	data[22] = 1'b0;
end 
// data[ 21 ]
initial
begin
	data[21] = 1'b0;
end 
// data[ 20 ]
initial
begin
	data[20] = 1'b0;
end 
// data[ 19 ]
initial
begin
	data[19] = 1'b0;
end 
// data[ 18 ]
initial
begin
	data[18] = 1'b0;
end 
// data[ 17 ]
initial
begin
	data[17] = 1'b0;
end 
// data[ 16 ]
initial
begin
	data[16] = 1'b0;
end 
// data[ 15 ]
initial
begin
	data[15] = 1'b0;
end 
// data[ 14 ]
initial
begin
	data[14] = 1'b0;
end 
// data[ 13 ]
initial
begin
	data[13] = 1'b0;
end 
// data[ 12 ]
initial
begin
	data[12] = 1'b0;
end 
// data[ 11 ]
initial
begin
	data[11] = 1'b0;
end 
// data[ 10 ]
initial
begin
	data[10] = 1'b0;
end 
// data[ 9 ]
initial
begin
	data[9] = 1'b0;
end 
// data[ 8 ]
initial
begin
	data[8] = 1'b0;
end 
// data[ 7 ]
initial
begin
	data[7] = 1'b0;
end 
// data[ 6 ]
initial
begin
	data[6] = 1'b0;
end 
// data[ 5 ]
initial
begin
	data[5] = 1'b1;
end 
// data[ 4 ]
initial
begin
	data[4] = 1'b0;
	data[4] = #600000 1'b1;
end 
// data[ 3 ]
initial
begin
	data[3] = 1'b1;
	data[3] = #600000 1'b0;
end 
// data[ 2 ]
initial
begin
	data[2] = 1'b1;
	data[2] = #600000 1'b0;
end 
// data[ 1 ]
initial
begin
	data[1] = 1'b0;
	data[1] = #200000 1'b1;
	data[1] = #400000 1'b0;
end 
// data[ 0 ]
initial
begin
	repeat(2)
	begin
		data[0] = 1'b1;
		data[0] = #200000 1'b0;
		# 200000;
	end
	data[0] = 1'b1;
end 

// writeEnable
always
begin
	writeEnable = 1'b0;
	writeEnable = #250000 1'b1;
	#250000;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #5000 1'b1;
	#5000;
end 
endmodule

