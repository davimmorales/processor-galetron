// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/09/2016 16:41:41"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          PC
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module PC_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] address;
reg branch;
reg clock;
reg jump;
reg negative;
reg zero;
// wires                                               
wire [31:0] programCounter;

// assign statements (if any)                          
PC i1 (
// port map - connection between master ports and signals/registers   
	.address(address),
	.branch(branch),
	.clock(clock),
	.jump(jump),
	.negative(negative),
	.programCounter(programCounter),
	.zero(zero)
);
initial 
begin 
#1000000 $finish;
end 
// address[ 31 ]
initial
begin
	address[31] = 1'b0;
end 
// address[ 30 ]
initial
begin
	address[30] = 1'b0;
end 
// address[ 29 ]
initial
begin
	address[29] = 1'b0;
end 
// address[ 28 ]
initial
begin
	address[28] = 1'b0;
end 
// address[ 27 ]
initial
begin
	address[27] = 1'b0;
end 
// address[ 26 ]
initial
begin
	address[26] = 1'b0;
end 
// address[ 25 ]
initial
begin
	address[25] = 1'b0;
end 
// address[ 24 ]
initial
begin
	address[24] = 1'b0;
end 
// address[ 23 ]
initial
begin
	address[23] = 1'b0;
end 
// address[ 22 ]
initial
begin
	address[22] = 1'b0;
end 
// address[ 21 ]
initial
begin
	address[21] = 1'b0;
end 
// address[ 20 ]
initial
begin
	address[20] = 1'b0;
end 
// address[ 19 ]
initial
begin
	address[19] = 1'b0;
end 
// address[ 18 ]
initial
begin
	address[18] = 1'b0;
end 
// address[ 17 ]
initial
begin
	address[17] = 1'b0;
end 
// address[ 16 ]
initial
begin
	address[16] = 1'b0;
end 
// address[ 15 ]
initial
begin
	address[15] = 1'b0;
end 
// address[ 14 ]
initial
begin
	address[14] = 1'b0;
end 
// address[ 13 ]
initial
begin
	address[13] = 1'b0;
end 
// address[ 12 ]
initial
begin
	address[12] = 1'b0;
end 
// address[ 11 ]
initial
begin
	address[11] = 1'b0;
end 
// address[ 10 ]
initial
begin
	address[10] = 1'b0;
end 
// address[ 9 ]
initial
begin
	address[9] = 1'b0;
end 
// address[ 8 ]
initial
begin
	address[8] = 1'b0;
end 
// address[ 7 ]
initial
begin
	address[7] = 1'b0;
end 
// address[ 6 ]
initial
begin
	address[6] = 1'b0;
end 
// address[ 5 ]
initial
begin
	address[5] = 1'b0;
end 
// address[ 4 ]
initial
begin
	address[4] = 1'b0;
end 
// address[ 3 ]
initial
begin
	address[3] = 1'b1;
end 
// address[ 2 ]
initial
begin
	address[2] = 1'b0;
end 
// address[ 1 ]
initial
begin
	address[1] = 1'b1;
end 
// address[ 0 ]
initial
begin
	address[0] = 1'b0;
end 

// zero
initial
begin
	zero = 1'b0;
	zero = #650000 1'b1;
	zero = #30000 1'b0;
end 

// negative
initial
begin
	negative = 1'b0;
	negative = #400000 1'b1;
	negative = #50000 1'b0;
end 

// jump
initial
begin
	jump = 1'b0;
	jump = #100000 1'b1;
	jump = #30000 1'b0;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #5000 1'b1;
	#5000;
end 

// branch
initial
begin
	branch = 1'b0;
	branch = #400000 1'b1;
	branch = #50000 1'b0;
	branch = #70000 1'b1;
	branch = #70000 1'b0;
	branch = #60000 1'b1;
	branch = #30000 1'b0;
end 
endmodule

