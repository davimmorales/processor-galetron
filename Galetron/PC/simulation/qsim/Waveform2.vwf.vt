// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/22/2018 20:15:10"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          PC
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module PC_vlg_vec_tst();
// constants                                           
// general purpose registers
reg HLT;
reg [11:0] address;
reg bnegative;
reg bzero;
reg clock;
reg jump;
reg jump_context_exchange;
reg negative;
reg resetCPU;
reg zero;
// wires                                               
wire [11:0] programCounter;

// assign statements (if any)                          
PC i1 (
// port map - connection between master ports and signals/registers   
	.HLT(HLT),
	.address(address),
	.bnegative(bnegative),
	.bzero(bzero),
	.clock(clock),
	.jump(jump),
	.jump_context_exchange(jump_context_exchange),
	.negative(negative),
	.programCounter(programCounter),
	.resetCPU(resetCPU),
	.zero(zero)
);
initial 
begin 
#1000000 $finish;
end 

// HLT
initial
begin
	HLT = 1'b0;
end 
// address[ 11 ]
initial
begin
	address[11] = 1'b0;
end 
// address[ 10 ]
initial
begin
	address[10] = 1'b0;
end 
// address[ 9 ]
initial
begin
	address[9] = 1'b0;
end 
// address[ 8 ]
initial
begin
	address[8] = 1'b0;
	address[8] = #520000 1'b1;
end 
// address[ 7 ]
initial
begin
	address[7] = 1'b0;
	address[7] = #260000 1'b1;
	address[7] = #260000 1'b0;
	address[7] = #250000 1'b1;
end 
// address[ 6 ]
initial
begin
	repeat(2)
	begin
		address[6] = 1'b0;
		address[6] = #130000 1'b1;
		# 130000;
	end
	address[6] = 1'b0;
	address[6] = #120000 1'b1;
	address[6] = #130000 1'b0;
	address[6] = #130000 1'b1;
end 
// address[ 5 ]
initial
begin
	repeat(2)
	begin
		address[5] = 1'b0;
		address[5] = #70000 1'b1;
		# 60000;
	end
	repeat(2)
	begin
		address[5] = 1'b0;
		address[5] = #60000 1'b1;
		# 70000;
	end
	address[5] = 1'b0;
	# 60000;
	repeat(2)
	begin
		address[5] = 1'b1;
		address[5] = #60000 1'b0;
		# 70000;
	end
	address[5] = 1'b1;
	address[5] = #60000 1'b0;
	address[5] = #60000 1'b1;
end 
// address[ 4 ]
initial
begin
	repeat(2)
	begin
		address[4] = 1'b0;
		# 40000;
		repeat(2)
		begin
			address[4] = 1'b1;
			address[4] = #30000 1'b0;
			# 30000;
		end
		address[4] = 1'b1;
		# 40000;
		repeat(2)
		begin
			address[4] = 1'b0;
			address[4] = #30000 1'b1;
			# 30000;
		end
	end
	address[4] = 1'b0;
	# 40000;
	repeat(2)
	begin
		address[4] = 1'b1;
		address[4] = #30000 1'b0;
		# 30000;
	end
	address[4] = 1'b1;
	# 40000;
	repeat(2)
	begin
		address[4] = 1'b0;
		address[4] = #30000 1'b1;
		# 30000;
	end
	address[4] = 1'b0;
end 
// address[ 3 ]
initial
begin
	repeat(6)
	begin
		address[3] = 1'b0;
		# 20000;
		repeat(2)
		begin
			address[3] = 1'b1;
			address[3] = #20000 1'b0;
			# 10000;
		end
		address[3] = 1'b1;
		# 20000;
		repeat(2)
		begin
			address[3] = 1'b0;
			address[3] = #20000 1'b1;
			# 10000;
		end
	end
	address[3] = 1'b0;
	address[3] = #20000 1'b1;
end 
// address[ 2 ]
initial
begin
	address[2] = 1'b0;
	# 10000;
	repeat(12)
	begin
		address[2] = 1'b1;
		address[2] = #10000 1'b0;
		address[2] = #10000 1'b1;
		address[2] = #20000 1'b0;
		address[2] = #10000 1'b1;
		address[2] = #10000 1'b0;
		# 20000;
	end
	address[2] = 1'b1;
	address[2] = #10000 1'b0;
	address[2] = #10000 1'b1;
end 
// address[ 1 ]
always
begin
	address[1] = 1'b0;
	address[1] = #20000 1'b1;
	#20000;
end 
// address[ 0 ]
always
begin
	address[0] = 1'b0;
	address[0] = #10000 1'b1;
	#10000;
end 

// bnegative
initial
begin
	bnegative = 1'b0;
end 

// bzero
initial
begin
	bzero = 1'b0;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #5000 1'b1;
	#5000;
end 

// jump
initial
begin
	jump = 1'b0;
end 

// jump_context_exchange
always
begin
	jump_context_exchange = 1'b0;
	jump_context_exchange = #50000 1'b1;
	#50000;
end 

// negative
initial
begin
	negative = 1'b0;
end 

// resetCPU
initial
begin
	resetCPU = 1'b0;
end 

// zero
initial
begin
	zero = 1'b0;
end 
endmodule

