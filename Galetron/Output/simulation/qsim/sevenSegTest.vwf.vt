// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/22/2016 10:26:06"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Output
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Output_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg [3:0] inputNumber;
// wires                                               
wire A;
wire B;
wire C;
wire D;
wire E;
wire F;
wire G;

// assign statements (if any)                          
Output i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.C(C),
	.D(D),
	.E(E),
	.F(F),
	.G(G),
	.clock(clock),
	.inputNumber(inputNumber)
);
initial 
begin 
#1000000 $finish;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #50000 1'b1;
	#50000;
end 
// inputNumber[ 3 ]
initial
begin
	inputNumber[3] = 1'b0;
end 
// inputNumber[ 2 ]
initial
begin
	inputNumber[2] = 1'b0;
	inputNumber[2] = #320000 1'b1;
	inputNumber[2] = #450000 1'b0;
end 
// inputNumber[ 1 ]
initial
begin
	inputNumber[1] = 1'b0;
	inputNumber[1] = #420000 1'b1;
	inputNumber[1] = #350000 1'b0;
end 
// inputNumber[ 0 ]
initial
begin
	inputNumber[0] = 1'b0;
	inputNumber[0] = #120000 1'b1;
	inputNumber[0] = #100000 1'b0;
	inputNumber[0] = #100000 1'b1;
	inputNumber[0] = #100000 1'b0;
end 
endmodule

